# SealedSecrets Examples for Hummingbot
# SealedSecrets provide a secure way to store encrypted secrets in Git
# Only the cluster can decrypt these secrets using the private key

# First, install the SealedSecrets controller:
# kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/controller.yaml

# Then use kubeseal to create SealedSecrets from regular secrets:
# echo -n mypassword | kubectl create secret generic mysecret --dry-run=client --from-file=password=/dev/stdin -o yaml | kubeseal -o yaml

---
# Example SealedSecret for Trading Keys
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: hummingbot-trading-keys-sealed
  namespace: hummingbot
  labels:
    app: hummingbot
    component: secrets
spec:
  encryptedData:
    # These are example encrypted values - replace with your actual sealed secrets
    binance_api_key: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    binance_secret_key: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    coinbase_api_key: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    coinbase_secret_key: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    coinbase_passphrase: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    kraken_api_key: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    kraken_secret_key: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
  template:
    metadata:
      name: hummingbot-trading-keys
      namespace: hummingbot
      labels:
        app: hummingbot
        component: secrets
    type: Opaque

---
# Example SealedSecret for Database Credentials
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: hummingbot-db-credentials-sealed
  namespace: hummingbot
  labels:
    app: hummingbot
    component: database
spec:
  encryptedData:
    postgres_user: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    postgres_password: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    postgres_db: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
    postgres_host: AgBy3i4OJSWK+PiTySYZZA9rO5QtVhDnJ8s...
  template:
    metadata:
      name: hummingbot-db-credentials
      namespace: hummingbot
      labels:
        app: hummingbot
        component: database
    type: Opaque

---
# Script to generate SealedSecrets from regular secrets
# Save this as scripts/generate-sealed-secrets.sh
apiVersion: v1
kind: ConfigMap
metadata:
  name: sealed-secrets-generator
  namespace: hummingbot
data:
  generate-sealed-secrets.sh: |
    #!/bin/bash
    # Script to generate SealedSecrets for Hummingbot
    
    set -e
    
    NAMESPACE=${NAMESPACE:-hummingbot}
    
    echo "Generating SealedSecrets for namespace: $NAMESPACE"
    
    # Check if kubeseal is installed
    if ! command -v kubeseal &> /dev/null; then
        echo "Error: kubeseal is not installed. Please install it first:"
        echo "https://github.com/bitnami-labs/sealed-secrets/releases"
        exit 1
    fi
    
    # Function to create sealed secret from environment variables
    create_sealed_secret() {
        local secret_name=$1
        local secret_file=$2
        
        echo "Creating SealedSecret: $secret_name"
        
        # Create regular secret first
        kubectl create secret generic $secret_name \
            --namespace=$NAMESPACE \
            --from-env-file=$secret_file \
            --dry-run=client -o yaml | \
        kubeseal -o yaml > sealed-$secret_name.yaml
        
        echo "SealedSecret saved to: sealed-$secret_name.yaml"
    }
    
    # Create sealed secrets for trading keys
    if [ -f "trading-keys.env" ]; then
        create_sealed_secret "hummingbot-trading-keys" "trading-keys.env"
    fi
    
    # Create sealed secrets for database
    if [ -f "database.env" ]; then
        create_sealed_secret "hummingbot-db-credentials" "database.env"
    fi
    
    # Create sealed secrets for redis
    if [ -f "redis.env" ]; then
        create_sealed_secret "hummingbot-redis-credentials" "redis.env"
    fi
    
    # Create sealed secrets for monitoring
    if [ -f "monitoring.env" ]; then
        create_sealed_secret "hummingbot-monitoring-secrets" "monitoring.env"
    fi
    
    echo "All SealedSecrets generated successfully!"
    echo "Apply them with: kubectl apply -f sealed-*.yaml"

  # Example environment files
  trading-keys.env.example: |
    binance_api_key=your_binance_api_key_here
    binance_secret_key=your_binance_secret_key_here
    coinbase_api_key=your_coinbase_api_key_here
    coinbase_secret_key=your_coinbase_secret_key_here
    coinbase_passphrase=your_coinbase_passphrase_here
    kraken_api_key=your_kraken_api_key_here
    kraken_secret_key=your_kraken_secret_key_here
  
  database.env.example: |
    postgres_user=hummingbot
    postgres_password=your_secure_password_here
    postgres_db=hummingbot
    postgres_host=postgresql-service
  
  redis.env.example: |
    redis_password=your_redis_password_here
    redis_host=redis-service
  
  monitoring.env.example: |
    prometheus_auth_token=your_prometheus_token_here
    grafana_api_key=your_grafana_api_key_here
    datadog_api_key=your_datadog_api_key_here
    slack_webhook_url=https://hooks.slack.com/services/your/webhook/url