# Environment profiles configuration
# Use: docker-compose --profile <profile_name> up
# Available profiles: local, paper, prod

x-common-hb: &common-hb
  build:
    context: .
    dockerfile: docker/Dockerfile.extend
  volumes:
    - ./conf:/home/hummingbot/conf
    - ./conf/connectors:/home/hummingbot/conf/connectors
    - ./conf/strategies:/home/hummingbot/conf/strategies
    - ./conf/controllers:/home/hummingbot/conf/controllers
    - ./conf/scripts:/home/hummingbot/conf/scripts
    - ./logs:/home/hummingbot/logs
    - ./data:/home/hummingbot/data
    - ./certs:/home/hummingbot/certs
    - ./scripts:/home/hummingbot/scripts
    - ./controllers:/home/hummingbot/controllers
  tty: true
  stdin_open: true
  restart: unless-stopped

services:
  # Local development environment
  hb-local:
    <<: *common-hb
    container_name: hb-local
    profiles: ["local"]
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    network_mode: host
    env_file: 
      - .env
      - .env.local
    environment:
      HEALTH_PORT: 5723
      LOG_LEVEL: DEBUG
      ENVIRONMENT: local
      PAPER_TRADING: "true"
      TELEMETRY_ENABLED: "false"
      PROMETHEUS_ENABLED: "false"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5723/health/readiness || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 30s
    depends_on:
      postgres-local:
        condition: service_healthy
      redis-local:
        condition: service_healthy
    ulimits:
      nproc: 65535
      nofile:
        soft: 32768
        hard: 65536

  # Paper trading environment
  hb-paper:
    <<: *common-hb
    container_name: hb-paper
    profiles: ["paper"]
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "7"
    ports:
      - "5723:5723"
      - "9090:9090"  # Prometheus metrics
    env_file:
      - .env
      - .env.paper
    environment:
      HEALTH_PORT: 5723
      LOG_LEVEL: INFO
      ENVIRONMENT: paper
      PAPER_TRADING: "true"
      TELEMETRY_ENABLED: "true"
      PROMETHEUS_ENABLED: "true"
      PROMETHEUS_PORT: 9090
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5723/health/readiness || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    depends_on:
      postgres-paper:
        condition: service_healthy
      redis-paper:
        condition: service_healthy
    # Security settings for paper environment
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=256m
    ulimits:
      nproc: 65535
      nofile:
        soft: 32768
        hard: 65536

  # Production environment
  hb-prod:
    <<: *common-hb
    container_name: hb-prod
    profiles: ["prod"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    ports:
      - "5723:5723"
      - "9090:9090"  # Prometheus metrics
    env_file:
      - .env
      - .env.prod
    environment:
      HEALTH_PORT: 5723
      LOG_LEVEL: WARN
      ENVIRONMENT: prod
      PAPER_TRADING: "false"
      TELEMETRY_ENABLED: "true"
      PROMETHEUS_ENABLED: "true"
      PROMETHEUS_PORT: 9090
      # Production optimizations
      PYTHONOPTIMIZE: 2
      PYTHONDONTWRITEBYTECODE: 1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5723/health/readiness || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    # Enhanced security for production
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=256m
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G


  # PostgreSQL for local development
  postgres-local:
    image: postgres:15.4-alpine
    container_name: postgres-local
    profiles: ["local"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: hummingbot
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: hummingbot_local
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - ./db:/docker-entrypoint-initdb.d
      - postgres_local_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U hummingbot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # PostgreSQL for paper trading
  postgres-paper:
    image: postgres:15.4-alpine
    container_name: postgres-paper
    profiles: ["paper"]
    restart: unless-stopped
    env_file:
      - .env
      - .env.paper
    volumes:
      - ./db:/docker-entrypoint-initdb.d
      - postgres_paper_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-hummingbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # PostgreSQL for production
  postgres-prod:
    image: postgres:15.4-alpine
    container_name: postgres-prod
    profiles: ["prod"]
    restart: unless-stopped
    env_file:
      - .env
      - .env.prod
    volumes:
      - ./db:/docker-entrypoint-initdb.d
      - postgres_prod_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-hummingbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis for local development
  redis-local:
    image: redis:7.2-alpine
    container_name: redis-local
    profiles: ["local"]
    restart: unless-stopped
    ports:
      - "6379:6379"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true

  # Redis for paper trading
  redis-paper:
    image: redis:7.2-alpine
    container_name: redis-paper
    profiles: ["paper"]
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_paper_pass}
    ports:
      - "6379:6379"
    volumes:
      - redis_paper_data:/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_paper_pass}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true

  # Redis for production
  redis-prod:
    image: redis:7.2-alpine
    container_name: redis-prod
    profiles: ["prod"]
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Gateway service (uncomment and configure as needed)
  gateway-paper:
    image: hummingbot/gateway:latest
    container_name: gateway-paper
    profiles: ["paper", "gateway"]
    restart: unless-stopped
    ports:
      - "15888:15888"
      - "8080:8080"
    volumes:
      - "./gateway_files/conf:/home/gateway/conf"
      - "./gateway_files/logs:/home/gateway/logs"
      - "./gateway_files/db:/home/gateway/db"
      - "./certs:/home/gateway/certs"
    env_file:
      - .env
      - .env.paper
    environment:
      - GATEWAY_PASSPHRASE=${GATEWAY_PASSPHRASE}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  gateway-prod:
    image: hummingbot/gateway:latest
    container_name: gateway-prod
    profiles: ["prod", "gateway"]
    restart: unless-stopped
    ports:
      - "15888:15888"
      - "8080:8080"
    volumes:
      - "./gateway_files/conf:/home/gateway/conf"
      - "./gateway_files/logs:/home/gateway/logs"
      - "./gateway_files/db:/home/gateway/db"
      - "./certs:/home/gateway/certs"
    env_file:
      - .env
      - .env.prod
    environment:
      - GATEWAY_PASSPHRASE=${GATEWAY_PASSPHRASE}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Prometheus for monitoring (paper and prod only)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    profiles: ["paper", "prod", "monitoring"]
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./k8s/prometheus-rules.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

volumes:
  postgres_local_data:
  postgres_paper_data:
  postgres_prod_data:
  redis_paper_data:
  redis_prod_data:
  prometheus_data:
