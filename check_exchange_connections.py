#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –±–∏—Ä–∂–∞–º –≤ Hummingbot
"""

import asyncio
import os
import sys
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ hummingbot
sys.path.append(os.path.join(os.path.dirname(__file__), 'hummingbot'))

from hummingbot.client.config.config_helpers import ClientConfigAdapter
from hummingbot.core.data_type.common import OrderType, PositionMode, TradeType
from hummingbot.core.utils.async_utils import safe_ensure_future


class ExchangeConnectionChecker:
    def __init__(self):
        self.client_config_map = ClientConfigAdapter()
        self.connections_status = {}
        
    async def check_bybit_perpetual(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit Perpetual"""
        try:
            from hummingbot.connector.derivative.bybit_perpetual.bybit_perpetual_derivative import BybitPerpetualDerivative
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = os.getenv("BYBIT_PERPETUAL_API_KEY")
            secret_key = os.getenv("BYBIT_PERPETUAL_SECRET_KEY")
            
            if not api_key or not secret_key:
                return {
                    "status": "error",
                    "message": "API –∫–ª—é—á–∏ –¥–ª—è Bybit Perpetual –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BYBIT_PERPETUAL_API_KEY –∏ BYBIT_PERPETUAL_SECRET_KEY"
                }
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            connector = BybitPerpetualDerivative(
                client_config_map=self.client_config_map,
                bybit_perpetual_api_key=api_key,
                bybit_perpetual_secret_key=secret_key,
                trading_required=False  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await connector.start_network()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            server_time = await connector._api_request(
                path_url="v5/market/time",
                is_auth_required=False
            )
            
            await connector.stop_network()
            
            return {
                "status": "success",
                "message": f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit Perpetual —É—Å–ø–µ—à–Ω–æ. –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time.get('result', {}).get('timeSecond', 'N/A')}",
                "server_time": server_time.get('result', {}).get('timeSecond', 'N/A')
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit Perpetual: {str(e)}"
            }
    
    async def check_kucoin_perpetual(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KuCoin Perpetual"""
        try:
            from hummingbot.connector.derivative.kucoin_perpetual.kucoin_perpetual_derivative import KucoinPerpetualDerivative
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = os.getenv("KUCOIN_PERPETUAL_API_KEY")
            secret_key = os.getenv("KUCOIN_PERPETUAL_SECRET_KEY")
            passphrase = os.getenv("KUCOIN_PERPETUAL_PASSPHRASE")
            
            if not api_key or not secret_key or not passphrase:
                return {
                    "status": "error",
                    "message": "API –∫–ª—é—á–∏ –¥–ª—è KuCoin Perpetual –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è KUCOIN_PERPETUAL_API_KEY, KUCOIN_PERPETUAL_SECRET_KEY –∏ KUCOIN_PERPETUAL_PASSPHRASE"
                }
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            connector = KucoinPerpetualDerivative(
                client_config_map=self.client_config_map,
                kucoin_perpetual_api_key=api_key,
                kucoin_perpetual_secret_key=secret_key,
                kucoin_perpetual_passphrase=passphrase,
                trading_required=False  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await connector.start_network()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            server_time = await connector._api_request(
                path_url="api/v1/timestamp",
                is_auth_required=False
            )
            
            await connector.stop_network()
            
            return {
                "status": "success",
                "message": f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KuCoin Perpetual —É—Å–ø–µ—à–Ω–æ. –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time.get('data', 'N/A')}",
                "server_time": server_time.get('data', 'N/A')
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KuCoin Perpetual: {str(e)}"
            }
    
    async def check_binance_spot(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance Spot"""
        try:
            from hummingbot.connector.exchange.binance.binance_exchange import BinanceExchange
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = os.getenv("BINANCE_API_KEY")
            secret_key = os.getenv("BINANCE_API_SECRET")
            
            if not api_key or not secret_key:
                return {
                    "status": "error",
                    "message": "API –∫–ª—é—á–∏ –¥–ª—è Binance Spot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BINANCE_API_KEY –∏ BINANCE_API_SECRET"
                }
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            connector = BinanceExchange(
                client_config_map=self.client_config_map,
                binance_api_key=api_key,
                binance_api_secret=secret_key,
                trading_required=False
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await connector.start_network()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            server_time = await connector._api_request(
                path_url="api/v3/time",
                is_auth_required=False
            )
            
            await connector.stop_network()
            
            return {
                "status": "success",
                "message": f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance Spot —É—Å–ø–µ—à–Ω–æ. –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time.get('serverTime', 'N/A')}",
                "server_time": server_time.get('serverTime', 'N/A')
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance Spot: {str(e)}"
            }
    
    async def check_okx_spot(self) -> Dict[str, any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX Spot"""
        try:
            from hummingbot.connector.exchange.okx.okx_exchange import OkxExchange
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = os.getenv("OKX_API_KEY")
            secret_key = os.getenv("OKX_SECRET_KEY")
            passphrase = os.getenv("OKX_PASSPHRASE")
            
            if not api_key or not secret_key or not passphrase:
                return {
                    "status": "error",
                    "message": "API –∫–ª—é—á–∏ –¥–ª—è OKX Spot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OKX_API_KEY, OKX_SECRET_KEY –∏ OKX_PASSPHRASE"
                }
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            connector = OkxExchange(
                client_config_map=self.client_config_map,
                okx_api_key=api_key,
                okx_secret_key=secret_key,
                okx_passphrase=passphrase,
                trading_required=False
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await connector.start_network()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            server_time = await connector._api_request(
                path_url="api/v5/public/time",
                is_auth_required=False
            )
            
            await connector.stop_network()
            
            return {
                "status": "success",
                "message": f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OKX Spot —É—Å–ø–µ—à–Ω–æ. –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time.get('data', [{}])[0].get('ts', 'N/A')}",
                "server_time": server_time.get('data', [{}])[0].get('ts', 'N/A')
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX Spot: {str(e)}"
            }
    
    async def check_all_exchanges(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–∏—Ä–∂"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º...")
        print("=" * 60)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        checks = [
            ("Bybit Perpetual", self.check_bybit_perpetual),
            ("KuCoin Perpetual", self.check_kucoin_perpetual),
            ("Binance Spot", self.check_binance_spot),
            ("OKX Spot", self.check_okx_spot),
        ]
        
        results = {}
        
        for exchange_name, check_func in checks:
            print(f"\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ {exchange_name}...")
            try:
                result = await check_func()
                results[exchange_name] = result
                
                if result["status"] == "success":
                    print(f"‚úÖ {exchange_name}: {result['message']}")
                else:
                    print(f"‚ùå {exchange_name}: {result['message']}")
                    
            except Exception as e:
                error_result = {
                    "status": "error",
                    "message": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                }
                results[exchange_name] = error_result
                print(f"‚ùå {exchange_name}: {error_result['message']}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        
        successful = sum(1 for result in results.values() if result["status"] == "success")
        total = len(results)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {successful}/{total}")
        print(f"‚ùå –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {total - successful}/{total}")
        
        if successful == total:
            print("\nüéâ –í—Å–µ –±–∏—Ä–∂–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ö†Ô∏è  {total - successful} –±–∏—Ä–∂(–∏) –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å.")
            print("\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            print("- BYBIT_PERPETUAL_API_KEY, BYBIT_PERPETUAL_SECRET_KEY")
            print("- KUCOIN_PERPETUAL_API_KEY, KUCOIN_PERPETUAL_SECRET_KEY, KUCOIN_PERPETUAL_PASSPHRASE")
            print("- BINANCE_API_KEY, BINANCE_API_SECRET")
            print("- OKX_API_KEY, OKX_SECRET_KEY, OKX_PASSPHRASE")
        
        return results


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = ExchangeConnectionChecker()
    await checker.check_all_exchanges()


if __name__ == "__main__":
    asyncio.run(main())